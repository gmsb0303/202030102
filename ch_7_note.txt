제 7장 제네릭과 컬렉션

[컬렉션의 개념]
요소(element) 객체들의 저장소
객체들의 컨테이너라고도 불림
요소의 개수에 따라 크기 자동 조절
요소의 삽입, 삭제에 따른 요소의 위치 자동 이동
고정 크기의 배열을 다루는 어려움 해소
다양한 객체들의 삽입, 삭제, 검색 등의 관리 용이

[컬렉션과 제네릭]
-컬렉션은 제네릭(generics) 기법으로 구현됨
-컬렉션의 요소는 객체만 가능
    기본적으로 int, char, double 등의 기본 타입 사용 불가
        JDK 1.5부터 자동 박싱/언박싱으로 기본 타입 값을 객체로 자동 변환

-제네릭
    특정 타입만 다루지 않고, 여러 종류의 타입으로 변신할 수 있도록 클래스나 메소드를 일반화시키는 기법
    JDK 1.5에서 도입(2004년 기점)
    모든 종류의 데이터 타입을 다룰 수 있도록 일반화된 타입 매개 변수로 클래스나 메소드를 작성하는 기법

[Vector <E>]
Vector<E>의 특성
    java.util.Vector
        <E>에서 E 대신 요소로 사용할 특정 타입으로 구체화
    여러 객체들을 삽입, 삭제, 검색하는 컨테이너 클래스
        배열의 길이 제한 극복
        원소의 개수가 넘쳐나면 자동으로 길이 조절
    Vector에 삽입 가능한  것
        객체, null
        기본 타입은 Wrapper 객체로 만들어 저장
    Vector에 객체 삽입
        벡터의 맨 뒤에 객체 추가
        벡터 중간에 객체 삽입
    Vector에서 객체 삭제
        임의의 위치에 있는 객체 삭제 가능 : 객체 삭제 후 자동 자리 이동

[컬렉션과 자동 박싱/언박싱]
JDK 1.5 이전
    기본 타입 데이터를 Wrapper 클래스를 이용하여 객체로 만들어 사용
    컬렉션으로부터 요소를 얻어올 때, Wrapper 클래스로 캐스팅 필요

JDK 1.5부터
    자동 박싱/언박싱이 작동하여 기본 타입 값 사용 가능
        제네릭의 타입 매개 변수를 기본 타입으로 구체화할 수는 없음


[ArrayList <E>]
ArrayList<E>의 특성
    java.util.ArrayList, 가변 크기 배열을 구현한 클래스
        <E>에서 E 대신 요소로 사용할 특정 타입으로 구체화
    ArrayList에 삽입 가능한  것
        객체, null
        기본 타입은 박싱/언박싱으로 Wrapper 객체로 만들어 저장
    ArrayList에 객체 삽입/삭제
        리스트의 맨 뒤에 객체 추가
        리스트의 중간에 객체 삽입
        임의의 위치에 있는 객체 삭제 가능
    벡터와 달리 스레드 동기화 기능 없음
        다수 스레드가 동시에 ArrayList에 접근할 때 동기화되지 않음
        개발자가 스레드 동기화 코드 작성

[컬렉션의 순차 검색을 위한 Iterator]
Iterator<E> 인터페이스
    Vector<E>, ArrayList<E>, LinkedList<E>가 상속받는 인터페이스
        리스트 구조의 컬렉션에서 요소의 순차 검색을 위한 메소드 포함
    Iterator<E> 인터페이스 메소드
        boolean hasNext() //방문할 요소가 남아있으면 true 리턴
        E next() //다음 요소 리턴
        void remove() // 마지막으로 리턴된 요소 제거
    iterator() 메소드 : Iterator 객체 반환
        Iterator 객체를 이용하여 인덱스 없이 순차적 검색 가능

[HashMap <K, V>]
HashMap<K,V>
    키(key)와 값(value)의 쌍으로 구성되는 요소를 다루는 컬렉션
        java.util.HashMap
        K는 키로 사용할 요소의 타입, V는 값으로 사용할 요소의 타입 지정
        키와 값이 한 쌍으로 삽입
        키는 해시맵에 삽입되는 위치 결정에 사용
        값을 검색하기 위해서는 반드시 키 이용
    삽입, 삭제, 검색이 빠른 특징
        요소 삽입 : put() 메소드
        요소 검색 : get() 메소드
